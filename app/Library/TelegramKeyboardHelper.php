<?php

namespace App\Library;

use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Laravel\Facades\Telegram;
use App\Models\Question;

class TelegramKeyboardHelper
{
    public static function getInlineKeyboard($buttons)
    {
        $keyboard = Keyboard::make()->inline()->setResizeKeyboard(true);

        foreach ($buttons as $button) {
            $keyboard->row([$button]);
        }

        return $keyboard;
    }

    public static function getFirstQuestionKeyboard()
    {
        $buttons = [
            ['text' => '–Ø–Ω–¥–µ–∫—Å –ï–¥–∞ üü†', 'callback_data' => 'questions;1;–Ø–Ω–¥–µ–∫—Å –ï–¥–∞ üü†'], 
            ['text' => '–í–∫—É—Å–í–∏–ª–ª üü¢', 'callback_data' => 'questions;1;–í–∫—É—Å–í–∏–ª–ª üü¢']
        ];

        $keyboard = self::getInlineKeyboard($buttons);

        return $keyboard;
    }

    public static function getSecondQuestionKeyboard()
    {
        $buttons = [
            ['text' => '–í–µ–ª–æ–∫—É—Ä—å–µ—Ä üö¥', 'callback_data' => 'questions;2;–í–µ–ª–æ–∫—É—Ä—å–µ—Ä üö¥'],
            ['text' => '–ü–µ—à–∏–π –∫—É—Ä—å–µ—Ä üö∂', 'callback_data' => 'questions;2;–ü–µ—à–∏–π –∫—É—Ä—å–µ—Ä üö∂'],
            ['text' => '–ö—É—Ä—å–µ—Ä –Ω–∞ –∞–≤—Ç–æ üöó', 'callback_data' => 'questions;2;–ö—É—Ä—å–µ—Ä –Ω–∞ –∞–≤—Ç–æ üöó']
        ];

        $keyboard = self::getInlineKeyboard($buttons);

        return $keyboard;
    }

    public static function getSixthQuestionKeyboard()
    {
        $buttons = [
            ['text' => '–î–∞', 'callback_data' => 'questions;6;–î–∞'],
            ['text' => '–ù–µ—Ç', 'callback_data' => 'questions;6;–ù–µ—Ç']
        ];

        $keyboard = self::getInlineKeyboard($buttons);

        return $keyboard;
    }

    public static function getSevenQuestionKeyboard()
    {
        $buttons = [
            ['text' => '–î–∞', 'callback_data' => 'questions;7;–î–∞'],
            ['text' => '–ù–µ—Ç', 'callback_data' => 'questions;7;–ù–µ—Ç']
        ];

        $keyboard = self::getInlineKeyboard($buttons);

        return $keyboard;
    }

    public static function getQuestionCallbackKeyboard($question_id)
    {
        switch ($question_id) {
            case Question::COMPANY_QUESTION_ID:
                return self::getFirstQuestionKeyboard();
                break;
            case Question::VACANCY_QUESTION_ID:
                return self::getSecondQuestionKeyboard();
                break;
            case Question::ALFA_QUESTION_ID:
                return self::getSixthQuestionKeyboard();
                break;
            case Question::EXPERIENCE_QUESTION_ID:
                return self::getSevenQuestionKeyboard();
                break;
        }
    }
}
